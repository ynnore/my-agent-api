{"ast":null,"code":"/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst map = new Map();\nexport const audioContext = (() => {\n  const didInteract = new Promise(res => {\n    window.addEventListener(\"pointerdown\", res, {\n      once: true\n    });\n    window.addEventListener(\"keydown\", res, {\n      once: true\n    });\n  });\n  return async options => {\n    try {\n      const a = new Audio();\n      a.src = \"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA\";\n      await a.play();\n      if (options !== null && options !== void 0 && options.id && map.has(options.id)) {\n        const ctx = map.get(options.id);\n        if (ctx) {\n          return ctx;\n        }\n      }\n      const ctx = new AudioContext(options);\n      if (options !== null && options !== void 0 && options.id) {\n        map.set(options.id, ctx);\n      }\n      return ctx;\n    } catch (e) {\n      await didInteract;\n      if (options !== null && options !== void 0 && options.id && map.has(options.id)) {\n        const ctx = map.get(options.id);\n        if (ctx) {\n          return ctx;\n        }\n      }\n      const ctx = new AudioContext(options);\n      if (options !== null && options !== void 0 && options.id) {\n        map.set(options.id, ctx);\n      }\n      return ctx;\n    }\n  };\n})();\nexport const blobToJSON = blob => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.onload = () => {\n    if (reader.result) {\n      const json = JSON.parse(reader.result);\n      resolve(json);\n    } else {\n      reject(\"oops\");\n    }\n  };\n  reader.readAsText(blob);\n});\nexport function base64ToArrayBuffer(base64) {\n  var binaryString = atob(base64);\n  var bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}","map":{"version":3,"names":["map","Map","audioContext","didInteract","Promise","res","window","addEventListener","once","options","a","Audio","src","play","id","has","ctx","get","AudioContext","set","e","blobToJSON","blob","resolve","reject","reader","FileReader","onload","result","json","JSON","parse","readAsText","base64ToArrayBuffer","base64","binaryString","atob","bytes","Uint8Array","length","i","charCodeAt","buffer"],"sources":["C:/SkinLensR/SkinLensR/my-agent-api/frontend/src/utils/utils.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type GetAudioContextOptions = AudioContextOptions & {\n  id?: string;\n};\n\nconst map: Map<string, AudioContext> = new Map();\n\nexport const audioContext: (\n  options?: GetAudioContextOptions,\n) => Promise<AudioContext> = (() => {\n  const didInteract = new Promise((res) => {\n    window.addEventListener(\"pointerdown\", res, { once: true });\n    window.addEventListener(\"keydown\", res, { once: true });\n  });\n\n  return async (options?: GetAudioContextOptions) => {\n    try {\n      const a = new Audio();\n      a.src =\n        \"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA\";\n      await a.play();\n      if (options?.id && map.has(options.id)) {\n        const ctx = map.get(options.id);\n        if (ctx) {\n          return ctx;\n        }\n      }\n      const ctx = new AudioContext(options);\n      if (options?.id) {\n        map.set(options.id, ctx);\n      }\n      return ctx;\n    } catch (e) {\n      await didInteract;\n      if (options?.id && map.has(options.id)) {\n        const ctx = map.get(options.id);\n        if (ctx) {\n          return ctx;\n        }\n      }\n      const ctx = new AudioContext(options);\n      if (options?.id) {\n        map.set(options.id, ctx);\n      }\n      return ctx;\n    }\n  };\n})();\n\nexport const blobToJSON = (blob: Blob) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      if (reader.result) {\n        const json = JSON.parse(reader.result as string);\n        resolve(json);\n      } else {\n        reject(\"oops\");\n      }\n    };\n    reader.readAsText(blob);\n  });\n\nexport function base64ToArrayBuffer(base64: string) {\n  var binaryString = atob(base64);\n  var bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}